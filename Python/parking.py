from csv import reader
from collections import defaultdict
with open('Python/parking_data.csv', 'r') as file:
    next(file)
    parking = list(reader(file))
    
with open('Python/cars.csv', 'r') as file:
    next(file)
    file = reader(file)
    cars = {}
    for i in file:
        cars[i[1]] = {"type": i[1], 'model': i[2]}
        
with open("Python/owners.csv", 'r') as file:
    next(file)
    owners = dict(reader(file))
    
with open("Python/shopping_centers.csv", 'r') as file:
    next(file)
    centers = dict(reader(file))
    
# 1. Рассчитайте общее количество каждого автомобиля на парковке.
# Используя данные из файлов parking_data.csv и cars.csv, напишите программу,
# которая рассчитывает общее количество каждого автомобиля, припаркованного на различных парковках. 
# Выведите список автомобилей с количеством парковок для каждого.
def kol_car():
    avto = {}
    for i in parking:
        avto[cars[i[0]]['type']] = avto.get(cars[i[0]]['type'], set())
        avto[cars[i[0]]['type']].add(i[2])
    for i,x in cars.items():
        try:
            l = len(avto[x['type']])
        except:
            avto[x['type']] = []
    for i in avto:
        l = len(avto[i])
        avto[i] = l
    return avto
print(kol_car())

# 2. Объедините данные о парковках и владельцах автомобилей для анализа.
# Объедините данные из файлов parking_data.csv и owners.csv, чтобы составить отчет, показывающий, 
# сколько раз каждый владелец припарковал свою машину в ТЦ. 
# Выведите имя владельца и количество парковок для каждого.
def vlad():
    center = defaultdict(dict)
    for i in parking:
        try:
            name= owners[i[1]]
        except:
            name = "Not in base"
        center[centers[i[4]]][name] = center[centers[i[4]]].get(name, 0) + 1
    return center
# print(vlad())

# 3. Найдите владельца, который чаще всего паркуется в одном и том же месте.
# Используя данные из файлов parking_data.csv и owners.csv, найдите владельца, 
# который чаще всего припарковывает свою машину на одном и том же парковочном месте.

# 4. Найдите количество машин, припаркованных в каждом ТЦ.
# Используя данные из файлов parking_data.csv и shopping_centers.csv, найдите количество машин,
# припаркованных в каждом ТЦ. Выведите количество парковок для каждого ТЦ.

def park():
    c = defaultdict(list)
    for i in parking:
        c[centers[i[4]]].append(i[1])
    return c
# print(park())

# 5. Определите, в каком ТЦ было больше всего парковок для автомобилей с определённым типом.
# Используя данные из файлов parking_data.csv, cars.csv и shopping_centers.csv, определите, 
# в каком ТЦ было больше всего парковок для автомобилей с определённым типом (например, легковые автомобили или внедорожники).



# 6. Рассчитайте среднее время парковки для каждой машины.
# Используя данные из файлов parking_data.csv и cars.csv, рассчитайте среднее время парковки для каждой машины.
# Для этого нужно вычислить разницу между временем въезда и выезда для каждой записи в parking_data.csv и вычислить 
# среднее время для каждой машины.

# 7. Определите, какой ТЦ имеет наибольшее количество уникальных парковочных мест.
# Используя данные из файлов parking_data.csv и shopping_centers.csv, определите, 
# в каком ТЦ имеется наибольшее количество уникальных парковочных мест (не повторяющихся мест).

# 8. Рассчитайте общее время, которое машины потратили на парковке в каждом ТЦ.
# Используя данные из файлов parking_data.csv и shopping_centers.csv, рассчитайте общее время,
# которое все машины потратили на парковке в каждом ТЦ. Выведите результаты по каждому ТЦ.

# 9. Найдите владельца, который припарковал свою машину в ТЦ больше всего раз.
# Используя данные из файлов parking_data.csv и owners.csv, определите владельца, 
# который припарковал свою машину в ТЦ больше всего раз. Выведите имя владельца и количество парковок.

# 10. Определите, какой тип автомобиля чаще всего парковался в каждом ТЦ.
# Используя данные из файлов parking_data.csv и cars.csv, определите,
# какой тип автомобиля (например, легковой, внедорожник, минивэн) чаще всего парковался в каждом ТЦ. 
# Выведите результаты для каждого ТЦ.



# 11. Найдите автомобиль, который припарковался в наибольшем количестве различных парковочных мест.
# Используя данные из файлов parking_data.csv и cars.csv, найдите автомобиль, 
# который припарковался в наибольшем количестве различных парковочных мест. Выведите номер машины и количество мест.

# 12. Найдите количество парковок для каждого типа автомобиля.
# Используя данные из файлов parking_data.csv и cars.csv, посчитайте, сколько раз каждый тип автомобиля (легковой, внедорожник, и т.д.) припарковался на различных парковках. Выведите результаты.

# 13. Определите, какой ТЦ имеет наибольшее количество автомобилей одного типа.
# Используя данные из файлов parking_data.csv, cars.csv и shopping_centers.csv, определите, в каком ТЦ больше всего припарковано автомобилей одного типа (например, внедорожников).

# 14. Рассчитайте общее время парковки для каждого автомобиля.
# Используя данные из файлов parking_data.csv и cars.csv, рассчитайте общее время, которое каждый автомобиль провел на парковке. Выведите результаты для каждого автомобиля.

# 15. Определите владельца, который припарковался в ТЦ в самое позднее время.
# Используя данные из файлов parking_data.csv и owners.csv, определите владельца, который припарковался в ТЦ в самое позднее время. Выведите имя владельца и время парковки.